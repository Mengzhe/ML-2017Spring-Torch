{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tar = 'http://torch7.s3-website-us-east-1.amazonaws.com/data/mnist.t7.tgz'\n",
    "\n",
    "if not paths.dirp('mnist.t7') then\n",
    "   os.execute('wget ' .. tar)\n",
    "   os.execute('tar xvf ' .. paths.basename(tar))\n",
    "end\n",
    "\n",
    "trainFile = 'mnist.t7/train_32x32.t7'\n",
    "testFile = 'mnist.t7/test_32x32.t7'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "trainData = nil\n",
    "testData = nil\n",
    "trainData = torch.load(trainFile,'ascii')\n",
    "testData = torch.load(testFile,'ascii')\n",
    "\n",
    "trainData.data = trainData.data\n",
    "trainData.labels = trainData.labels\n",
    "testData.data = testData.data\n",
    "testData.labels = testData.labels\n",
    "\n",
    "classes = { '1','0'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "N=150\n",
    "trainset = {};\n",
    "trainset.data = torch.DoubleTensor( N*N , 1 , 32 , 64)\n",
    "trainset.labels = torch.DoubleTensor( N*N , 1)\n",
    "trsize = N*N\n",
    "\n",
    "Nt=100\n",
    "testset = {};\n",
    "testset.data = torch.DoubleTensor( Nt*Nt , 1 , 32 , 64)\n",
    "testset.labels = torch.DoubleTensor( Nt*Nt , 1)\n",
    "tesize = Nt*Nt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "function trainset:size() return N*N end\n",
    "--build training set\n",
    "n=1\n",
    "for i = 1, N do\n",
    "    for j = i+1, i+N do\n",
    "        trainset.data[n] = torch.cat(trainData.data[i],trainData.data[j])\n",
    "        if trainData.labels[i] == trainData.labels[j] then \n",
    "            trainset.labels[n][1] = 1 -- 1: same digit\n",
    "        else\n",
    "            trainset.labels[n][1] = 2 -- 2: different digits\n",
    "        end\n",
    "        n = n + 1\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAAAAACH9iFYAAABi0lEQVRIie2SMUgCURzG/2oNIaQcRKnQUEFDKDRFUxYUTeYthUINERTlFEFDUVAEDrVFgTU0NZTQEBgUuQhSQ0rQESEOCulS5IkpSp82VCJ27zTcpG+5x//3ft97xx3Rf+ovKo7j1pxn+uNCZv3PcnvXlOsEABBxI+kzS25ScianM1UQZ38GiiLqvdZ8r/LT7xR7e5LQNWPDdiISX5IT4V+QCwEA/J6MyLzkJgC83vRLU+vhAnCnph4Xyz9II+MYNDL7mxUu2JmUiIJArHymLFknCyLNKMt3lCRAtC93AJHaixEZbEOO8frFdIqRI4eCRW3IVPCJ+ASwrKuhgIyXwJ6hhgLSTn7gShq1xLMdVTRQFlmzNIkgLggrWlnbtHEBBBkf0w0A8A6w9e7dZwA5DwMrl0ZX74Edlt62GAaAW4vcFXUhBFSSpHVIAAA/L/czEtFcGo0SY+40BAA+a5O8TkSCREGfOwoAqS11RZ300dKChq8HzxM9nmM7UdmnecNDvopt7FgwXpNff/kEIomoc+lY0OMAAAAASUVORK5CYII=",
      "text/plain": [
       "Console does not support images"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 32,
       "width": 64
      }
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       " 1\n",
       "[torch.DoubleTensor of size 1]\n",
       "\n"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itorch.image(trainset.data[100]) -- display the 100-th image in dataset\n",
    "print(trainset.labels[100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAAAAACH9iFYAAACAklEQVRIie1TTUhUURQ+bxJlQtJixIShhaDUIp0UtQGhcKnhwqzdBOEqChcyTimRYpAgzULBoKDUYBYihmgu3EROQRJRQovZTX9KvsI3xWQhne9dF/PmzZv37oyEmxZ+q3PO953vnnPve0T7+B9RP4GJuj30+zRm3sxJ11zRdV0XiRO5BI1fwAmV/YVStioU1wEAeN8oFRxs/sjg152Mfhl9aAUwDBA0aq4sxf3nXiKqK16mk8720sl4AxERbW9YqlkG9W2KEu1VNt6NuRSnwfnA4VTw4ZZ0/NT9LRS39ZURIel4iIooANy+PI1Al2UFC6ojUFc7UzE4YqffAn/VATcdqT5QMpMxKDAFRXdbk5feuNPpMVt/UyWRVk5EmkalJbIF/MxnzAT8wkbPARgw4i7pK4SV6LKZuBTJLd4ZkZxrGpzziflMWRer2brr7cr3lT9G8nBKMQ8wDdyF36bTcdEwPbuRbSCEmF+0+AvhWIG2v6b7b/auhX9Jxs2LCzxqRL4Iz9rZmjjwwBww+BtP3XbJRXxKBT0aHjv9QxaDIIAn6cT8DoQ4OvZo83Sg1vt56V7eWbuHiJLjkhWY12PM/HJI1hUCtNgpj8fTEvuJLfWsU+F9xQxmddRJERF1rBu/sQ78uCqVVAwyOFyVa/C5jMG1XJq8OJ4wDKb8Bbur9/FP2AG1MfAZKmqQagAAAABJRU5ErkJggg==",
      "text/plain": [
       "Console does not support images"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 32,
       "width": 64
      }
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       " 1\n",
       "[torch.DoubleTensor of size 1]\n",
       "\n"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itorch.image(trainset.data[200]) -- display the 100-th image in dataset\n",
    "print(trainset.labels[200])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "--build test set\n",
    "function testset:size() return Nt*Nt end\n",
    "n=1\n",
    "for i = 1, Nt do\n",
    "    for j = i+1, i+Nt do\n",
    "        testset.data[n] = torch.cat(testData.data[i],testData.data[j])\n",
    "        if testData.labels[i] == testData.labels[j] then \n",
    "            testset.labels[n][1] = 1\n",
    "        else\n",
    "            testset.labels[n][1] = 2\n",
    "        end\n",
    "        n = n + 1\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\n",
       "  data : DoubleTensor - size: 22500x1x32x64\n",
       "  size : function: 0x058ac818\n",
       "  labels : DoubleTensor - size: 22500x1\n",
       "}\n"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(trainset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 22500\n",
       "     1\n",
       "[torch.LongStorage of size 2]\n",
       "\n"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(#trainset.labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1,.,.) = \n",
       " Columns 1 to 15\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    3\n",
       "    0    0    0    0    0    0    0    0    0    0   30   36   94  154  170\n",
       "    0    0    0    0    0    0    0    0    0   49  238  253  253  253  253\n",
       "    0    0    0    0    0    0    0    0    0   18  219  253  253  253  253\n",
       "    0    0    0    0    0    0    0    0    0    0   80  156  107  253  253\n",
       "    0    0    0    0    0    0    0    0    0    0    0   14    1  154  253\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0  139  253\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0   11  190\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0   35\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0   39\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0   24  114  221\n",
       "    0    0    0    0    0    0    0    0    0    0   23   66  213  253  253\n",
       "    0    0    0    0    0    0    0    0   18  171  219  253  253  253  253\n",
       "    0    0    0    0    0    0   55  172  226  253  253  253  253  244  133\n",
       "    0    0    0    0    0    0  136  253  253  253  212  135  132   16    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "\n",
       "Columns 16 to 30\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "   18   18   18  126  136  175   26  166  255  247  127    0    0    0    0\n",
       "  253  253  253  253  253  225  172  253  242  195   64    0    0    0    0\n",
       "  253  253  253  253  251   93   82   82   56   39    0    0    0    0    0\n",
       "  253  198  182  247  241    0    0    0    0    0    0    0    0    0    0\n",
       "  205   11    0   43  154    0    0    0    0    0    0    0    0    0    0\n",
       "   90    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "  190    2    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "  253   70    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "  241  225  160  108    1    0    0    0    0    0    0    0    0    0    0\n",
       "   81  240  253  253  119   25    0    0    0    0    0    0    0    0    0\n",
       "    0   45  186  253  253  150   27    0    0    0    0    0    0    0    0\n",
       "    0    0   16   93  252  253  187    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0  249  253  249   64    0    0    0    0    0    0    0\n",
       "    0   46  130  183  253  253  207    2    0    0    0    0    0    0    0\n",
       "  148  229  253  253  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "253  250  182    0    0    0    0    0    0    0    0\n",
       "  253  253  253  253  201   78    0    0    0    0    0    0    0    0    0\n",
       "  253  253  198   81    2    0    0    0    0    0    0    0    0    0    0\n",
       "  195   80    9    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "   11    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "\n",
       "Columns 31 to 45\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0   51\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0   48  238\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0   38  165  253\n",
       "    0    0    0    0    0    0    0    0    0    0    0    7  178  252  240\n",
       "    0    0    0    0    0    0    0    0    0    0    0   57  252  252   63\n",
       "    0    0    0    0    0    0    0    0    0    0    0  198  253  190    0\n",
       "    0    0    0    0    0    0    0    0    0    0   76  246  252  112    0\n",
       "    0    0    0    0    0    0    0    0    0    0   85  252  230   25    0\n",
       "    0    0    0    0    0    0    0    0    0    0   85  252  223    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0   85  252  145    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0   86  253  225    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0   85  252  249  146   48\n",
       "    0    0    0    0    0    0    0    0    0    0   85  252  252  252  229\n",
       "    0    0    0    0    0    0    0    0    0    0   28  199  252  252  253\n",
       "    0    0    0    0    0    0    0    0    0    0    0   25  128  252  253\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "\n",
       "Columns 46 to 60\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0   51  159  253  159   50    0    0    0    0    0    0\n",
       "    0    0    0   48  238  252  252  252  237    0    0    0    0    0    0\n",
       "    0    0   54  227  253  252  239  233  252   57    6    0    0    0    0\n",
       "   10   60  224  252  253  252  202   84  252  253  122    0    0    0    0\n",
       "  163  252  252  252  253  252  252   96  189  253  16"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "7    0    0    0    0\n",
       "  238  253  253  190  114  253  228   47   79  255  168    0    0    0    0\n",
       "  252  252  179   12   75  121   21    0    0  253  243   50    0    0    0\n",
       "  233  208   84    0    0    0    0    0    0  253  252  165    0    0    0\n",
       "   71   19   28    0    0    0    0    0    0  253  252  195    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0  253  252  195    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0  255  253  196    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0  253  252  148    0    0    0\n",
       "    0    0    0    0    0    0    0    7  135  253  186   12    0    0    0\n",
       "    0    0    0    0    0    0    7  131  252  225   71    0    0    0    0\n",
       "    0    0    0    0    0   48  165  252  173    0    0    0    0    0    0\n",
       "    0    0    0    0  114  238  253  162    0    0    0    0    0    0    0\n",
       "   29   85  178  225  253  223  167   56    0    0    0    0    0    0    0\n",
       "  215  252  252  252  196  130    0    0    0    0    0    0    0    0    0\n",
       "  252  252  233  145    0    0    0    0    0    0    0    0    0    0    0\n",
       "  252  141   37    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
       "\n",
       "Columns 61 to 64\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "    0    0    0    0\n",
       "[torch.DoubleTensor of size 1x32x64]\n",
       "\n"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainset.data[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAAAAACH9iFYAAACAklEQVRIie1TTUhUURQ+bxJlQtJixIShhaDUIp0UtQGhcKnhwqzdBOEqChcyTimRYpAgzULBoKDUYBYihmgu3EROQRJRQovZTX9KvsI3xWQhne9dF/PmzZv37oyEmxZ+q3PO953vnnPve0T7+B9RP4GJuj30+zRm3sxJ11zRdV0XiRO5BI1fwAmV/YVStioU1wEAeN8oFRxs/sjg152Mfhl9aAUwDBA0aq4sxf3nXiKqK16mk8720sl4AxERbW9YqlkG9W2KEu1VNt6NuRSnwfnA4VTw4ZZ0/NT9LRS39ZURIel4iIooANy+PI1Al2UFC6ojUFc7UzE4YqffAn/VATcdqT5QMpMxKDAFRXdbk5feuNPpMVt/UyWRVk5EmkalJbIF/MxnzAT8wkbPARgw4i7pK4SV6LKZuBTJLd4ZkZxrGpzziflMWRer2brr7cr3lT9G8nBKMQ8wDdyF36bTcdEwPbuRbSCEmF+0+AvhWIG2v6b7b/auhX9Jxs2LCzxqRL4Iz9rZmjjwwBww+BtP3XbJRXxKBT0aHjv9QxaDIIAn6cT8DoQ4OvZo83Sg1vt56V7eWbuHiJLjkhWY12PM/HJI1hUCtNgpj8fTEvuJLfWsU+F9xQxmddRJERF1rBu/sQ78uCqVVAwyOFyVa/C5jMG1XJq8OJ4wDKb8Bbur9/FP2AG1MfAZKmqQagAAAABJRU5ErkJggg==",
      "text/plain": [
       "Console does not support images"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 32,
       "width": 64
      }
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       " 1\n",
       "[torch.DoubleTensor of size 1]\n",
       "\n"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itorch.image(trainset.data[200]) -- display the 100-th image in dataset\n",
    "print(trainset.labels[200])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAAAAACH9iFYAAAB7UlEQVRIie1UTUhUURg9pk90NKRmRhqCEuxHi2ajIQppQZvCH8ifoF1CBIFS2BjYomgjgqPubCG6UDKDZFZKwVAgZCDppCNFIEw0YDPQIqJ580bOtYUv58rcW6Bbz+o77/zcex+XC+xjz8iSyf18bwuG58d3WzZFkuSXY3vIrw4EyJ5/mE7NRS9eG3GrpMoUl0sKkbvIfn2+PEJhhRlyKbSGjWUPgJ4kL2nzfQv8FuLdVX7IV6jHDwPAR+oLei1Olg/PuG8nRJ3O4zP5zqHR2gWXSgEgtyn4o0btqTe5ris/JzbFCXu+I16pTY/JIU3eHaF4km0T42mkUGUKJDimFACcJMfSv+6y6VV4PHHGSjV51JMSu/D9yNZwQPa8dGJiTVfQvINV5hVkWhqTDOoOALwWUYlV/Tqd4XC+J/3afEWKjWl2JvbZnqQjdJ1H4JG2ICcbqTRrcK1kWpKkR5tHyTpbt0lZnFX2KL0HSQPeGICfG0YRDt0D+CAhNdS+wd9bUOa/Mtv2W7UDkuTzwWf29FCWj4bFC2NrnBTxg4pNTjMNyzSnfL7qHXoHxa08ABWjVqxz+6v8pHUbwNnrwGgE058yFyj2dW1+DS/ecBXFry4pNvB/uIaiKVJYQflOZWntStQ6br4Nze9q+X3o8Qfg2MuYmKzFtAAAAABJRU5ErkJggg==",
      "text/plain": [
       "Console does not support images"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 32,
       "width": 64
      }
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       " 2\n",
       "[torch.DoubleTensor of size 1]\n",
       "\n"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itorch.image(testset.data[200]) -- display the 100-th image in dataset\n",
    "print(testset.labels[200])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "-- ignore setmetatable for now, it is a feature beyond the scope of this tutorial. It sets the index operator.\n",
    "setmetatable(trainset, \n",
    "    {__index = function(t, i) \n",
    "                   return {t.data[i], t.labels[i]} \n",
    "                end}\n",
    ");\n",
    "trainset.data = trainset.data:double() -- convert the data from a ByteTensor to a DoubleTensor.\n",
    "\n",
    "function trainset:size() \n",
    "    return self.data:size(1) \n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22500\t\n"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(trainset:size()) -- just to test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\n",
       "  data : DoubleTensor - size: 22500x1x32x64\n",
       "  size : function: 0x29dcbd60\n",
       "  labels : DoubleTensor - size: 22500x1\n",
       "}\n"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\n",
       "  1 : DoubleTensor - size: 1x32x64\n",
       "  2 : DoubleTensor - size: 1\n",
       "}\n"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAAAAACH9iFYAAAB3UlEQVRIie2ST0hUYRTFb+PYy9BFixYDFoTUJshBTRozahEEFjQLXy6CENy2EBeVoRK1yCAR+7MTpGRQgiiaIBIaiCaLMGg3tLLBDGbhuLARk3PPazF/m/e9ibGNi87qnu/c373f430i/7Ud1TqlUy3/wAfTAFa2zrcvKVZTCO3cGr678xsUn7qh1yv21ViW3xhMA1Cg943OeML+hmt35shRU9aaVo0N6Pfm886sma49Oh4l6ZBvDWkwDUTrzw7uFdE194/wB1oePiOZHXDZzR+KaOpLd7ZWRMrj3ickycyrvr77YLwmP7bQYN3tWru0UJe3+/9YPrZHQk0iG/Hp5ZjI8OauqOO6QAg4WTCKd6VZT4IkF3pOi4jIkfd82ez+gnmNFY2j8dJslpPhcLgx50YyTsjNn1tHf9EpHpSGvq4DRXP4Iy8a3pmNH4F8bd3WuXp3S06Tmc8NhmMbiwX+FpJnPPmhn7RND93GRK4KRvDUE5fjXzlomYILmswWA2l97M3Lc/KEMbDx615wn/0iqYszx7z5R5lEh/ECYgNYTgCI36ywv32dr828NH4AFEhNmOOchshTXlngBhRjByvybSscqa3Y8RddIa+WHfmqnTFf5ndURfv8Ala7ctvrNxooz67bqAwZAAAAAElFTkSuQmCC",
      "text/plain": [
       "Console does not support images"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 32,
       "width": 64
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(trainset[250]) -- load sample number 33.\n",
    "itorch.image(trainset[250][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "require 'nn'\n",
    "net = nn.Sequential()\n",
    "net:add(nn.SpatialConvolution(1, 6, 5, 5)) -- 3 input image channels, 6 output channels, 5x5 convolution kernel\n",
    "net:add(nn.ReLU())                       -- non-linearity \n",
    "net:add(nn.SpatialMaxPooling(2,2,2,2))     -- A max-pooling operation that looks at 2x2 windows and finds the max.\n",
    "net:add(nn.SpatialConvolution(6, 16, 5, 5))\n",
    "net:add(nn.ReLU())                       -- non-linearity \n",
    "net:add(nn.SpatialMaxPooling(2,2,2,2))\n",
    "net:add(nn.View(16*5*13))                    -- reshapes from a 3D tensor of 16x5x5 into 1D tensor of 16*5*5\n",
    "net:add(nn.Linear(16*5*13, 120))             -- fully connected layer (matrix multiplication between input and weights)\n",
    "net:add(nn.ReLU())                       -- non-linearity \n",
    "net:add(nn.Linear(120, 84))\n",
    "net:add(nn.ReLU())                       -- non-linearity \n",
    "net:add(nn.Linear(84, 2))                   -- 2 is the number of outputs of the network (in this case, 10 digits)\n",
    "net:add(nn.LogSoftMax())                     -- converts the output to a log-probability. Useful for classification problems\n",
    "\n",
    "criterion = nn.ClassNLLCriterion()\n",
    "\n",
    "trainer = nn.StochasticGradient(net, criterion)\n",
    "trainer.learningRate = 0.001\n",
    "trainer.maxIteration = 10 -- just do 5 epochs of training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "# StochasticGradient: training\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 0.17279644048802\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 0.027492289434312\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 0.0085097786046916\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 0.00030367461026086\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 5.4418107024594e-05\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 3.405439633588e-05\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 2.5352449137012e-05\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 2.0163968745685e-05\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 1.6708558561611e-05\t\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "# current error = 1.4229558246631e-05\t\n",
       "# StochasticGradient: you have reached the maximum number of iterations\t\n",
       "# training error = 1.4229558246631e-05\t\n",
       "\n"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainer:train(trainset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "testset.data = testset.data:double()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 2\n",
       "[torch.DoubleTensor of size 1]\n",
       "\n"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAAAAACH9iFYAAAB7UlEQVRIie1UTUhUURg9pk90NKRmRhqCEuxHi2ajIQppQZvCH8ifoF1CBIFS2BjYomgjgqPubCG6UDKDZFZKwVAgZCDppCNFIEw0YDPQIqJ580bOtYUv58rcW6Bbz+o77/zcex+XC+xjz8iSyf18bwuG58d3WzZFkuSXY3vIrw4EyJ5/mE7NRS9eG3GrpMoUl0sKkbvIfn2+PEJhhRlyKbSGjWUPgJ4kL2nzfQv8FuLdVX7IV6jHDwPAR+oLei1Olg/PuG8nRJ3O4zP5zqHR2gWXSgEgtyn4o0btqTe5ris/JzbFCXu+I16pTY/JIU3eHaF4km0T42mkUGUKJDimFACcJMfSv+6y6VV4PHHGSjV51JMSu/D9yNZwQPa8dGJiTVfQvINV5hVkWhqTDOoOALwWUYlV/Tqd4XC+J/3afEWKjWl2JvbZnqQjdJ1H4JG2ICcbqTRrcK1kWpKkR5tHyTpbt0lZnFX2KL0HSQPeGICfG0YRDt0D+CAhNdS+wd9bUOa/Mtv2W7UDkuTzwWf29FCWj4bFC2NrnBTxg4pNTjMNyzSnfL7qHXoHxa08ABWjVqxz+6v8pHUbwNnrwGgE058yFyj2dW1+DS/ecBXFry4pNvB/uIaiKVJYQflOZWntStQ6br4Nze9q+X3o8Qfg2MuYmKzFtAAAAABJRU5ErkJggg==",
      "text/plain": [
       "Console does not support images"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 32,
       "width": 64
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(testset.labels[200])\n",
    "itorch.image(testset.data[200])\n",
    "predicted = net:forward(testset.data[200])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 8.4878e-11\n",
       " 1.0000e+00\n",
       "[torch.DoubleTensor of size 2]\n",
       "\n",
       "\n"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-- the output of the network is Log-Probabilities. To convert them to probabilities, you have to take e^x \n",
    "print(predicted:exp())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for i=1,predicted:size(1) do\n",
    "    print(classes[i], predicted[i])\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "correct = 0\n",
    "for i=1,tesize do\n",
    "    local groundtruth = testset.labels[i]\n",
    "    local prediction = net:forward(testset.data[i])\n",
    "    local confidences, indices = torch.sort(prediction, true)  -- true means sort in descending order\n",
    "    \n",
    "    if groundtruth[1] == indices[1] then\n",
    "        correct = correct + 1\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9572\t95.72 % \t\n"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(correct, 100*correct/tesize .. ' % ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "iTorch",
   "language": "lua",
   "name": "itorch"
  },
  "language_info": {
   "name": "lua",
   "version": "5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
